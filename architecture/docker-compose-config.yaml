version: '3.8'

services:
  # Базы данных
  postgres:
    image: postgres:14
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: philos
      POSTGRES_PASSWORD: password  # В производственной среде заменить на секрет
      POSTGRES_DB: philos_concepts
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init/postgres:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U philos"]
      interval: 10s
      timeout: 5s
      retries: 5

  neo4j:
    image: neo4j:4.4
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      NEO4J_AUTH: neo4j/password  # В производственной среде заменить на секрет
      NEO4J_dbms_memory_heap_max__size: 1G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7474"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:5
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: philos
      MONGO_INITDB_ROOT_PASSWORD: password  # В производственной среде заменить на секрет
      MONGO_INITDB_DATABASE: philos_concepts
    volumes:
      - mongo_data:/data/db
      - ./init/mongo:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mongosh", "admin", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Кэш и очередь сообщений
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: philos
      RABBITMQ_DEFAULT_PASS: password  # В производственной среде заменить на секрет
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API сервисы
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile.dev
    ports:
      - "4000:4000"
    environment:
      PORT: 4000
      NODE_ENV: development
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_here}  # Использовать переменную среды или значение по умолчанию
      REDIS_URL: redis://redis:6379
      USER_SERVICE_URL: http://user-service:4001
      CONCEPT_SERVICE_URL: http://concept-service:4002
      GRAPH_SERVICE_URL: http://graph-service:4003
      THESIS_SERVICE_URL: http://thesis-service:4004
      SYNTHESIS_SERVICE_URL: http://synthesis-service:4005
      CLAUDE_SERVICE_URL: http://claude-service:4006
    depends_on:
      redis:
        condition: service_healthy
      user-service:
        condition: service_started
      concept-service:
        condition: service_started
      graph-service:
        condition: service_started
      thesis-service:
        condition: service_started
      synthesis-service:
        condition: service_started
      claude-service:
        condition: service_started
    volumes:
      - ./api-gateway:/app
      - /app/node_modules
    command: npm run dev

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile.dev
    ports:
      - "4001:4001"
    environment:
      PORT: 4001
      NODE_ENV: development
      DB_URL: postgres://philos:password@postgres:5432/philos_concepts
      REDIS_URL: redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./user-service:/app
      - /app/node_modules
    command: npm run dev

  concept-service:
    build:
      context: ./concept-service
      dockerfile: Dockerfile.dev
    ports:
      - "4002:4002"
    environment:
      PORT: 4002
      NODE_ENV: development
      DB_URL: postgres://philos:password@postgres:5432/philos_concepts
      REDIS_URL: redis://redis:6379
      GRAPH_SERVICE_URL: http://graph-service:4003
      THESIS_SERVICE_URL: http://thesis-service:4004
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      graph-service:
        condition: service_started
      thesis-service:
        condition: service_started
    volumes:
      - ./concept-service:/app
      - /app/node_modules
    command: npm run dev

  graph-service:
    build:
      context: ./graph-service
      dockerfile: Dockerfile.dev
    ports:
      - "4003:4003"
    environment:
      PORT: 4003
      NODE_ENV: development
      NEO4J_URL: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: password  # В производственной среде заменить на секрет
      REDIS_URL: redis://redis:6379
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./graph-service:/app
      - /app/node_modules
    command: npm run dev

  thesis-service:
    build:
      context: ./thesis-service
      dockerfile: Dockerfile.dev
    ports:
      - "4004:4004"
    environment:
      PORT: 4004
      NODE_ENV: development
      MONGO_URL: mongodb://philos:password@mongodb:27017/philos_concepts
      REDIS_URL: redis://redis:6379
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./thesis-service:/app
      - /app/node_modules
    command: npm run dev

  synthesis-service:
    build:
      context: ./synthesis-service
      dockerfile: Dockerfile.dev
    ports:
      - "4005:4005"
    environment:
      PORT: 4005
      NODE_ENV: development
      NEO4J_URL: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: password  # В производственной среде заменить на секрет
      MONGO_URL: mongodb://philos:password@mongodb:27017/philos_concepts
      CLAUDE_SERVICE_URL: http://claude-service:4006
    depends_on:
      neo4j:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      claude-service:
        condition: service_started
    volumes:
      - ./synthesis-service:/app
      - /app/node_modules
    command: npm run dev

  claude-service:
    build:
      context: ./claude-service
      dockerfile: Dockerfile.dev
    ports:
      - "4006:4006"
    environment:
      PORT: 4006
      NODE_ENV: development
      DB_URL: postgres://philos:password@postgres:5432/philos_concepts
      RABBITMQ_URL: amqp://philos:password@rabbitmq:5672
      CLAUDE_API_KEY: ${CLAUDE_API_KEY:-your_claude_api_key_here}  # Использовать переменную среды или значение по умолчанию
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./claude-service:/app
      - /app/node_modules
    command: npm run dev

  name-analysis-service:
    build:
      context: ./name-analysis-service
      dockerfile: Dockerfile.dev
    ports:
      - "4007:4007"
    environment:
      PORT: 4007
      NODE_ENV: development
      CONCEPT_SERVICE_URL: http://concept-service:4002
      GRAPH_SERVICE_URL: http://graph-service:4003
      THESIS_SERVICE_URL: http://thesis-service:4004
      CLAUDE_SERVICE_URL: http://claude-service:4006
    depends_on:
      concept-service:
        condition: service_started
      graph-service:
        condition: service_started
      thesis-service:
        condition: service_started
      claude-service:
        condition: service_started
    volumes:
      - ./name-analysis-service:/app
      - /app/node_modules
    command: npm run dev  

  origin-detection-service:
    build:
      context: ./origin-detection-service
      dockerfile: Dockerfile.dev
    ports:
      - "4008:4008"
    environment:
      PORT: 4008
      NODE_ENV: development
      CONCEPT_SERVICE_URL: http://concept-service:4002
      GRAPH_SERVICE_URL: http://graph-service:4003
      THESIS_SERVICE_URL: http://thesis-service:4004
      CLAUDE_SERVICE_URL: http://claude-service:4006
      MONGO_URL: mongodb://philos:password@mongodb:27017/philos_concepts
      REDIS_URL: redis://redis:6379
      TRANSFORM_DB_URL: postgres://philos:password@postgres:5432/philos_concepts
    depends_on:
      concept-service:
        condition: service_started
      graph-service:
        condition: service_started
      thesis-service:
        condition: service_started
      claude-service:
        condition: service_started
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./origin-detection-service:/app
      - /app/node_modules
    command: npm run dev
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:4008/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Фронтенд
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      REACT_APP_API_URL: http://localhost:4000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm start
    depends_on:
      api-gateway:
        condition: service_started

  # Мониторинг и логирование
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    depends_on:
      api-gateway:
        condition: service_started
      user-service:
        condition: service_started
      concept-service:
        condition: service_started
      graph-service:
        condition: service_started
      thesis-service:
        condition: service_started
      synthesis-service:
        condition: service_started
      claude-service:
        condition: service_started
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    volumes:
      - ./monitoring/grafana:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin  # В производственной среде заменить на секрет
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 30s
      timeout: 10s
      retries: 3

  logstash:
    image: docker.elastic.co/logstash/logstash:7.14.0
    ports:
      - "5044:5044"
      - "9600:9600"
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - ./monitoring/logstash/config:/usr/share/logstash/config
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9600"]
      interval: 30s
      timeout: 10s
      retries: 3

  kibana:
    image: docker.elastic.co/kibana/kibana:7.14.0
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  historical-context-service:
    build:
      context: ./historical-context-service
      dockerfile: Dockerfile.dev
    ports:
      - "4009:4009"
    environment:
      PORT: 4009
      NODE_ENV: development
      CONCEPT_SERVICE_URL: http://concept-service:4002
      GRAPH_SERVICE_URL: http://graph-service:4003
      THESIS_SERVICE_URL: http://thesis-service:4004
      CLAUDE_SERVICE_URL: http://claude-service:4006
      MONGO_URL: mongodb://philos:password@mongodb:27017/philos_concepts
      REDIS_URL: redis://redis:6379
      POSTGRES_URL: postgres://philos:password@postgres:5432/philos_concepts
    depends_on:
      concept-service:
        condition: service_started
      graph-service:
        condition: service_started
      thesis-service:
        condition: service_started
      claude-service:
        condition: service_started
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./historical-context-service:/app
      - /app/node_modules
    command: npm run dev
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:4009/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  practical-application-service:
    build:
      context: ./practical-application-service
      dockerfile: Dockerfile.dev
    ports:
      - "4010:4010"
    environment:
      PORT: 4010
      NODE_ENV: development
      CONCEPT_SERVICE_URL: http://concept-service:4002
      GRAPH_SERVICE_URL: http://graph-service:4003
      THESIS_SERVICE_URL: http://thesis-service:4004
      CLAUDE_SERVICE_URL: http://claude-service:4006
      MONGO_URL: mongodb://philos:password@mongodb:27017/philos_concepts
      REDIS_URL: redis://redis:6379
    depends_on:
      concept-service:
        condition: service_started
      graph-service:
        condition: service_started
      thesis-service:
        condition: service_started
      claude-service:
        condition: service_started
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./practical-application-service:/app
      - /app/node_modules
    command: npm run dev
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:4010/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  dialogue-service:
    build:
      context: ./dialogue-service
      dockerfile: Dockerfile.dev
    ports:
      - "4011:4011"
    environment:
      PORT: 4011
      NODE_ENV: development
      CONCEPT_SERVICE_URL: http://concept-service:4002
      THESIS_SERVICE_URL: http://thesis-service:4004
      CLAUDE_SERVICE_URL: http://claude-service:4006
      MONGO_URL: mongodb://philos:password@mongodb:27017/philos_concepts
      POSTGRES_URL: postgres://philos:password@postgres:5432/philos_concepts
    depends_on:
      concept-service:
        condition: service_started
      thesis-service:
        condition: service_started
      claude-service:
        condition: service_started
      mongodb:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./dialogue-service:/app
      - /app/node_modules
    command: npm run dev
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:4011/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  evolution-service:
    build:
      context: ./evolution-service
      dockerfile: Dockerfile.dev
    ports:
      - "4012:4012"
    environment:
      PORT: 4012
      NODE_ENV: development
      CONCEPT_SERVICE_URL: http://concept-service:4002
      GRAPH_SERVICE_URL: http://graph-service:4003
      THESIS_SERVICE_URL: http://thesis-service:4004
      CLAUDE_SERVICE_URL: http://claude-service:4006
      MONGO_URL: mongodb://philos:password@mongodb:27017/philos_concepts
      POSTGRES_URL: postgres://philos:password@postgres:5432/philos_concepts
    depends_on:
      concept-service:
        condition: service_started
      graph-service:
        condition: service_started
      thesis-service:
        condition: service_started
      claude-service:
        condition: service_started
      mongodb:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./evolution-service:/app
      - /app/node_modules
    command: npm run dev
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:4012/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  neo4j_data:
  neo4j_logs:
  mongo_data:
  redis_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data: