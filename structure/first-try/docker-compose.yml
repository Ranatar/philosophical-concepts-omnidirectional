# docker-compose.yml
version: '3.8'

services:
  # PostgreSQL
  postgres:
    image: postgres:14
    container_name: philosophy_postgres
    environment:
      POSTGRES_DB: philosophy_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/postgres/migrations:/migrations
      - ./db/postgres/scripts:/scripts
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - philosophy_network

  # PostgreSQL migrations
  postgres-migrate:
    build:
      context: ./db/postgres
      dockerfile: Dockerfile.migrations
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: philosophy_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - ./db/postgres/migrations:/migrations
    networks:
      - philosophy_network
    command: ["./migrate.sh"]

  # Neo4j
  neo4j:
    image: neo4j:5.12.0
    container_name: philosophy_neo4j
    environment:
      NEO4J_AUTH: neo4j/${NEO4J_PASSWORD:-password}
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_dbms_memory_heap_initial__size: '512m'
      NEO4J_dbms_memory_heap_max__size: '2G'
      NEO4J_dbms_memory_pagecache_size: '1G'
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - ./db/neo4j/migrations:/migrations
      - ./db/neo4j/scripts:/scripts
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "${NEO4J_PASSWORD:-password}", "RETURN 1"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s
    networks:
      - philosophy_network

  # Neo4j migrations
  neo4j-migrate:
    build:
      context: ./db/neo4j
      dockerfile: Dockerfile.migrations
    depends_on:
      neo4j:
        condition: service_healthy
    environment:
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: ${NEO4J_PASSWORD:-password}
    volumes:
      - ./db/neo4j/migrations:/migrations
    networks:
      - philosophy_network
    command: ["./migrate.sh"]

  # MongoDB
  mongodb:
    image: mongo:6.0
    container_name: philosophy_mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD:-password}
      MONGO_INITDB_DATABASE: philosophy_service
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./db/mongodb/migrations:/migrations
      - ./db/mongodb/scripts:/scripts
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - philosophy_network

  # MongoDB migrations
  mongodb-migrate:
    build:
      context: ./db/mongodb
      dockerfile: Dockerfile.migrations
    depends_on:
      mongodb:
        condition: service_healthy
    environment:
      MONGODB_URI: mongodb://root:${MONGODB_PASSWORD:-password}@mongodb:27017
      MONGODB_DB: philosophy_service
    volumes:
      - ./db/mongodb/migrations:/migrations
    networks:
      - philosophy_network
    command: ["node", "/scripts/migration-runner.js"]

  # Redis
  redis:
    image: redis:7-alpine
    container_name: philosophy_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - philosophy_network

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: philosophy_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/alerts:/etc/prometheus/alerts
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - philosophy_network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: philosophy_grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - philosophy_network

  # Node Exporter для метрик хоста
  node-exporter:
    image: prom/node-exporter:latest
    container_name: philosophy_node_exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points'
      - '^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
    networks:
      - philosophy_network

  # PostgreSQL Exporter
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: philosophy_postgres_exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:${POSTGRES_PASSWORD:-password}@postgres:5432/philosophy_db?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - philosophy_network

  # MongoDB Exporter
  mongodb-exporter:
    image: percona/mongodb_exporter:0.35
    container_name: philosophy_mongodb_exporter
    command:
      - '--mongodb.uri=mongodb://root:${MONGODB_PASSWORD:-password}@mongodb:27017'
      - '--collect-all'
    ports:
      - "9216:9216"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - philosophy_network

  # Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: philosophy_redis_exporter
    ports:
      - "9121:9121"
    environment:
      REDIS_ADDR: "redis:6379"
    depends_on:
      - redis
    networks:
      - philosophy_network

  # Диагностический сервис
  diagnostics:
    build:
      context: ./monitoring
      dockerfile: Dockerfile
    container_name: philosophy_diagnostics
    environment:
      POSTGRES_URL: postgres://postgres:${POSTGRES_PASSWORD:-password}@postgres:5432/philosophy_db
      NEO4J_URL: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: ${NEO4J_PASSWORD:-password}
      MONGODB_URL: mongodb://root:${MONGODB_PASSWORD:-password}@mongodb:27017
      REDIS_URL: redis://redis:6379
    ports:
      - "3002:3000"
    depends_on:
      - postgres
      - neo4j
      - mongodb
      - redis
    networks:
      - philosophy_network

volumes:
  postgres_data:
  neo4j_data:
  neo4j_logs:
  mongodb_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  philosophy_network:
    driver: bridge